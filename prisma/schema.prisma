// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  password            String
  firstName           String
  lastName            String
  roles               Role[]
  isVerified          Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  Event               Event[]
  EventMember         EventMember[]
  Spending            Spending[]
  sentInvitations     Invitation[]  @relation("InviterRelation")
  receivedInvitations Invitation[]  @relation("InviteeRelation")
}

enum Role {
  user
  admin
  superadmin
}

model Event {
  id         Int           @id @default(autoincrement())
  name       String
  ownerId    Int
  owner      User          @relation(fields: [ownerId], references: [id])
  members    EventMember[]
  spendings  Spending[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  Invitation Invitation[]
}

model EventMember {
  id                   Int                    @id @default(autoincrement())
  userId               Int
  user                 User                   @relation(fields: [userId], references: [id])
  eventId              Int
  event                Event                  @relation(fields: [eventId], references: [id])
  SpendingDistribution SpendingDistribution[]
  prepaidAmount        Float                  @default(0) // Initial value set to 0
}

model Spending {
  id            Int                    @id @default(autoincrement())
  amount        Float // Amount of money spent
  description   String? // Optional description of the spending
  payerId       Int // Foreign key to the user who paid
  payer         User                   @relation(fields: [payerId], references: [id])
  eventId       Int // Foreign key referencing the event
  event         Event                  @relation(fields: [eventId], references: [id])
  distributions SpendingDistribution[] // Tracks how spending is divided
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model SpendingDistribution {
  id         Int         @id @default(autoincrement())
  spendingId Int // Foreign key to the spending entry
  spending   Spending    @relation(fields: [spendingId], references: [id])
  memberId   Int // Foreign key to the event member who owes money
  member     EventMember @relation(fields: [memberId], references: [id])
  amount     Float // The amount this member owes for the spending
  isPaid     Boolean     @default(false) // Whether the member has paid this amount
}

model Invitation {
  id      Int   @id @default(autoincrement())
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  inviterId Int // The user who sends the invitation (event owner)
  inviter   User @relation("InviterRelation", fields: [inviterId], references: [id])

  inviteeId Int // The user who is invited
  invitee   User @relation("InviteeRelation", fields: [inviteeId], references: [id])

  status         InvitationStatus @default(PENDING) // Pending, Accepted, Rejected, Canceled
  expirationDate DateTime // Expiration time for the invitation (15 minutes)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}
